/* Auto-generated by genmsg_cpp for file /home/rosdev/fuerte_workspace/sandbox/tum_simulator/cvg_sim_msgs/msg/MotorCommand.msg */
#ifndef CVG_SIM_MSGS_MESSAGE_MOTORCOMMAND_H
#define CVG_SIM_MSGS_MESSAGE_MOTORCOMMAND_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace cvg_sim_msgs
{
template <class ContainerAllocator>
struct MotorCommand_ {
  typedef MotorCommand_<ContainerAllocator> Type;

  MotorCommand_()
  : header()
  , force()
  , torque()
  , frequency()
  , voltage()
  {
  }

  MotorCommand_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , force(_alloc)
  , torque(_alloc)
  , frequency(_alloc)
  , voltage(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _force_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  force;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _torque_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  torque;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _frequency_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  frequency;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _voltage_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  voltage;


  typedef boost::shared_ptr< ::cvg_sim_msgs::MotorCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cvg_sim_msgs::MotorCommand_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MotorCommand
typedef  ::cvg_sim_msgs::MotorCommand_<std::allocator<void> > MotorCommand;

typedef boost::shared_ptr< ::cvg_sim_msgs::MotorCommand> MotorCommandPtr;
typedef boost::shared_ptr< ::cvg_sim_msgs::MotorCommand const> MotorCommandConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::cvg_sim_msgs::MotorCommand_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::cvg_sim_msgs::MotorCommand_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace cvg_sim_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cvg_sim_msgs::MotorCommand_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cvg_sim_msgs::MotorCommand_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cvg_sim_msgs::MotorCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ccd4d4d4606731d1c73409e9bfa55808";
  }

  static const char* value(const  ::cvg_sim_msgs::MotorCommand_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xccd4d4d4606731d1ULL;
  static const uint64_t static_value2 = 0xc73409e9bfa55808ULL;
};

template<class ContainerAllocator>
struct DataType< ::cvg_sim_msgs::MotorCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cvg_sim_msgs/MotorCommand";
  }

  static const char* value(const  ::cvg_sim_msgs::MotorCommand_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cvg_sim_msgs::MotorCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
float32[] force\n\
float32[] torque\n\
float32[] frequency\n\
float32[] voltage\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::cvg_sim_msgs::MotorCommand_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::cvg_sim_msgs::MotorCommand_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::cvg_sim_msgs::MotorCommand_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cvg_sim_msgs::MotorCommand_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.force);
    stream.next(m.torque);
    stream.next(m.frequency);
    stream.next(m.voltage);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MotorCommand_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cvg_sim_msgs::MotorCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::cvg_sim_msgs::MotorCommand_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "force[]" << std::endl;
    for (size_t i = 0; i < v.force.size(); ++i)
    {
      s << indent << "  force[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.force[i]);
    }
    s << indent << "torque[]" << std::endl;
    for (size_t i = 0; i < v.torque.size(); ++i)
    {
      s << indent << "  torque[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.torque[i]);
    }
    s << indent << "frequency[]" << std::endl;
    for (size_t i = 0; i < v.frequency.size(); ++i)
    {
      s << indent << "  frequency[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.frequency[i]);
    }
    s << indent << "voltage[]" << std::endl;
    for (size_t i = 0; i < v.voltage.size(); ++i)
    {
      s << indent << "  voltage[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.voltage[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // CVG_SIM_MSGS_MESSAGE_MOTORCOMMAND_H

